""" ----------------------- 파이썬 금융통계 실습 ---------------------------"""
# 지난 시간에 간단히 계산했던 평균과 기대값을 조금 더 살펴봅시다. 
#%% 1. 평균과 기대값
# 평균: 어떤 데이터를 하나로 요약할 수 있는 대표값으로서 일반적으로 산술평균을 의미
# average=1/n*sum(x_i)=sum(1/n*x_i)
# 여기서 x_i는 i번째 데이터, # n은 자료의 갯수, 즉 x_i들의 갯수
#
# 기대값: 데이터의 값에 데이터가 발생할 확률을 곱해서 구한 평균
# E(x)=sum(p_i*x_i)
# 여기서, p_i는 데이터 x_i가 발생할 확률, 즉 P(x_i)=p_i
#
# 평균과 기대값의 차이?
# - 평균: 사후적인 개념 ==> 평균을 계산하는 경우 동일한 가중치를 갖는 과거 데이터로부터 계산
# - 기대값: 사전적인 개념 ==> 평균을 계산하기 위해 미래 데이터가 발생가능한 확률을 부여한후
# 확률과 데이터의 곱을 합하여 계산
# 주사위 예제를 통해서 평균과 기대값의 차이를 살펴보도록 합시다. 
# 우선, 1~6까지 발생할 가능성이 동일한 주사위를 던진 결과를 생성하여 봅시다.
import numpy as np
n=10 # 주사위 던진 횟수
dice=np.random.randint(1,7,size=n) # 주사위 던진 결과 저장
# 평균
average=sum(dice)/n
# 기대값: 주사위의 6개 수가 발생할 확률이 1/6으로 동일하다고 가정
case=np.array([1,2,3,4,5,6])
prob=np.array([1/6,1/6,1/6,1/6,1/6,1/6])
Expectation=sum(case*prob) # NOTE sum(p_i*x_i) 이 공식 사용
print(Expectation)

#%% 위의 평균과 기대값을 비교해 보니 조금 다릅니다. # 왜 이런 차이가 발생할까요?
# 기대값은 사전적으로 계산한 이론적인 평균인 반면 평균은 데이터로부터 경험적으로 계산한 평균
# 따라서, 과거 데이터의 요약에서는 평균(사후적)을 많이 사용하고, 
# 미래 데이터의 요약에서는 기대값(사전적)을 많이 사용
# 그렇다면 평균과 기대값은 항상 다른가요?
# 우리가 미래를 예측한다고 할 때
# 과거의 충분한 양의 데이터를 가지고 있고, 
# 과거에 발생한 개별 사건에 대한 정확한 확률만 부여할 수 있다면, 
# 평균과 기대값은 일치하게 됩니다. 
# 다만, 가정: 미래의 발생할 사건은 과거의 발생할 사건의 무작위적인 반복
# 이를 확인하기 위해 앞의 주사위 예제에서 주사위 던진 횟수를 크게 증가시켜 봅시다. 
average=np.zeros(shape=(10000,2))
for n in range(1,10001):
 dice=np.random.randint(1,7,size=n)
 average[n-1,0]=n
 average[n-1,1]=sum(dice)/n
import matplotlib.pyplot as plt
fig=plt.figure()
ax=fig.add_subplot(1,1,1)
ax.plot(average[:,0], average[:,1])

#%% 위의 그림에서 데이터의 갯수가 커질수록 평균은 이론적인 평균값(기대값)인 3.5로
# 수렴해 가는 것을 확인할 수 있음(물론 1~6까지 각각 발생할 확률이 1/6이 맞다는 가정하에)
# 앞의 주사위 예제에서 기대값은 주사위의 1~6까지 각각 발생할 확률을 안다고 가정하였다. 
# 하지만, 일반적으로 금융데이터의 경우 각각의 금융데이터가 발생할 확률을 미리 아는 경우는 없다. 
# 이런 경우 우리는 각각의 금융데이터가 미래에 발생할 확률을 과거의 자료로 부터 계산(추정)해야 한다. 
# 주사위 예제로 부터 1~6까지 각각의 경우가 발생할 확률을 구해서 평균과 비교해보자. 
n=100 
# 주사위 던진 횟수
dice=np.random.randint(1,7,size=n) # 주사위 던진 결과 저장
average=dice.mean() # 평균계산
import pandas as pd
dice_df=pd.DataFrame(dice, columns=["dice"]) # array --> dataframe
print(dice_df)
dice_df_prob=dice_df.groupby('dice').dice.count()/n # 각각의 경험적 확률 계산
sum(dice_df_prob) # 합이 1인지 확인
case=np.array([1,2,3,4,5,6]) # 주사위 발생 가능 수
prob=dice_df_prob.to_numpy() # NOTE ndarray-like이지만 ndarray가 아니므로 실제 ndarray가 필요한 상황에 사용
Expectation=sum(case*prob) # 기대값 계산
print(Expectation)

#%% 위의 예제에서 평균(average)과 기대값(Expectation)은 정확하게 일치!
# 즉, 미래 발생할 사건의 확률에 대하여 알 수 없는 경우 과거의 충분한 자료로부터 확률을 구하면
# 사후적 평균과 사전적 기대값은 일치하게 된다. 
# 여기서 중요한 것은 미래사건의 확률을 구하기 위하여 미래사건의 발생을 잘 반영하는
# 과거자료를 사용하여야 한다.
# 주가 예제: 2020년 1월 1일부터 2020년 12월 31일까지 KOSPI 일별주가수익률에 대하여
# 일별주가수익률이 양인 경우를 1, 음인 경우를 0으로 두고 다음을 계산하여 봅시다. 
# i) 데이터를 바탕으로 일별주가수익률이 오를 확률과 내릴 확률
# ii) 과거 1년치 자료를 보았을 때 2021년 1월 1일 주가가 오를 확률은 얼마입니까?
import yfinance as yf
kospi = yf.download('^KS11', start="2020-01-01", end="2020-12-31")
kospi = yf.download('^KS11', start="2020-01-01", end="2020-12-31")['Adj Close']
kospi_rtn = np.log(kospi / kospi.shift(1))
kospi_rtn.plot()
prob_up=sum(kospi_rtn>0)/len(kospi_rtn) # 과거 1년 동안 코스피가 오른 경우에 대한 경험적 확률
print(prob_up)
prob_down=1-prob_up # 과거 1년 동안 코스피가 내린 경우에 대한 경험적 확률
print(prob_down)
# 위의 예시에서 우리는 내일의 주가가 오를지 내를지를 확률적으로 판단하기 위하여
# 얼마정도의 과거 데이터를 보아야 할까요? 다음 강의에서 다루어 봅시다.

